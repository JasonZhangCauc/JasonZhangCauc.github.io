<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/09/16/99-License/"/>
      <url>/2018/09/16/99-License/</url>
      <content type="html"><![CDATA[<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>EnlighterJS is OpenSource and licensed under the Terms of <a href="http://opensource.org/licenses/MIT" target="_blank" rel="noopener">The MIT License (X11)</a>. You’re welcome to <a href="https://github.com/AndiDittrich/EnlighterJS/blob/master/CONTRIBUTE.md" target="_blank" rel="noopener">contribute</a>!</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/16/90-Screenshots/"/>
      <url>/2018/09/16/90-Screenshots/</url>
      <content type="html"><![CDATA[<h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="http://enlighterjs.org/screenshot1.png" alt="Screenshot 1"><br><img src="http://enlighterjs.org/screenshot2.png" alt="Screenshot 2">    </p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/16/80-Compatibility/"/>
      <url>/2018/09/16/80-Compatibility/</url>
      <content type="html"><![CDATA[<h2 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h2><p>All browsers supported by MooTools and with HTML5 capabilities for “data-“ attributes are compatible with EnlighterJS.<br>It’s possible that it may work with earlier/other browsers.</p><ul><li>Chrome 10+</li><li>Safari 5+</li><li>Internet Explorer 6+</li><li>Firefox 2+</li><li>Opera 9+</li></ul><p>EnlighterJS requires MooTools.Core/1.4 (no compat) - tested with:</p><ul><li>Core/1.4.5</li><li>Core/1.5.0</li><li>Core/1.5.1</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/16/70-Contribution/"/>
      <url>/2018/09/16/70-Contribution/</url>
      <content type="html"><![CDATA[<h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><p>EnlighterJS is OpenSource and managed on <a href="https://github.com/AndiDittrich/EnlighterJS" target="_blank" rel="noopener">GitHub</a> - if you like, you’re welcome to contribute!<br>To simplify the release and quality control process, please follow these remarks:</p><h3 id="Notices"><a href="#Notices" class="headerlink" title="Notices"></a>Notices</h3><ul><li>Your commits/pull-request should only contain changes of the <code>Source/</code>, <code>Resources/TestcaseData</code> directories or the Examples located into the root directory - otherwise i have to merge the request manually</li><li><strong>Do not change</strong> the files located into the <code>Examples/</code> or <code>Build/</code> directory - they are automatically generated during the build-process using data from <code>Resources/TestcaseData</code></li><li>Related software packages like MooTools, Bootstrap, ANT-contrib are updated by the maintainer</li><li>If you form a concept of larger project changes, please <a href="https://github.com/AndiDittrich/EnlighterJS/issues" target="_blank" rel="noopener">discuss</a> them with the contributors <strong>before</strong> implementing</li></ul><h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><ul><li>To change contents of the <code>README.md</code> file please edit the split files in <code>Docs/</code> - the readme file is automatically generated by merging these files during the build process</li></ul><h3 id="Adding-a-new-Language"><a href="#Adding-a-new-Language" class="headerlink" title="Adding a new Language"></a>Adding a new Language</h3><ul><li>First of all: take a look on other languages which are already available to learn about functions and coding styles</li><li>To start with a new language please use the <code>LanguageDevelopment.phtml</code> workspace. It will automatically load <code>Source/Language/Template.mylang.js</code> (the startup file for your language development).</li><li>Rename your language file <code>Template.mylang.js</code> to the <strong>camel-cased</strong> real language name - e.g. <code>Vhdl.js</code></li><li>Add detailed comments to each language rule!</li><li>Keep the code as small as possible: e.g. use regex instead of long keyword lists</li><li>In case your language is a superset of another one, please <strong>extend</strong> the origin language - do not copy the origin file</li><li>Add an language testcase/demo to the <code>Resouces/TestcaseData</code> directory</li><li>Finally create a <a href="https://help.github.com/articles/creating-a-pull-request/" target="_blank" rel="noopener">Pull Request on GitHub</a> - your changes will be reviewed and commonly added to the project</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/16/60-CustomBuilds/"/>
      <url>/2018/09/16/60-CustomBuilds/</url>
      <content type="html"><![CDATA[<h2 id="Custom-Builds"><a href="#Custom-Builds" class="headerlink" title="Custom Builds"></a>Custom Builds</h2><p>The EnlighterJS project is using <a href="http://ant.apache.org/" target="_blank" rel="noopener">Apache ANT</a> as build-system.<br><a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="noopener">UglifyJS2</a> and <a href="https://github.com/jakubpawlowicz/clean-css" target="_blank" rel="noopener">clean-css</a> are used to minify the production-ready javascript and css files.<br>To save bandwidth/traffic or include self-defined languages, you can easily customize your EnlighterJS build by editing the <em>build.xml</em> file (found in the root directory) and run Apache ANT (target <em>build</em>)</p><h3 id="Cloud-Web-based-builder"><a href="#Cloud-Web-based-builder" class="headerlink" title="Cloud/Web based builder"></a>Cloud/Web based builder</h3><p>You can also use the web-based <a href="http://enlighterjs.org/Builder.html" target="_blank" rel="noopener">EnlighterJS Builder</a> to generate your customized package <strong>without the need of ANT/development environment</strong> - everything is done for you server-site!</p><h3 id="Software-Requirements"><a href="#Software-Requirements" class="headerlink" title="Software Requirements"></a>Software Requirements</h3><ul><li><a href="http://ant.apache.org/" target="_blank" rel="noopener">Apache ANT 1.9</a></li><li><a href="http://sourceforge.net/projects/ant-contrib/files/ant-contrib/" target="_blank" rel="noopener">Ant-Contrib</a></li><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="noopener">UglifyJS2</a></li><li><a href="https://github.com/jakubpawlowicz/clean-css" target="_blank" rel="noopener">clean-css</a></li></ul><h3 id="Include-Exclude-Languages-and-Themes"><a href="#Include-Exclude-Languages-and-Themes" class="headerlink" title="Include/Exclude Languages and Themes"></a>Include/Exclude Languages and Themes</h3><p>If you want to remove some of the default theme you can edit the <em>include.themes</em> property and modify the list of css source files.<br>For Example: only include the modern themes</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Themes to include !--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"include.themes"</span> <span class="attr">value</span>=<span class="string">"Enlighter Godzilla Beyond Classic MooTwo Eclipse Droide"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Or Include only your custom themes (Note: they have to be located into <code>Source/Themes/</code>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Themes to include !--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"include.themes"</span> <span class="attr">value</span>=<span class="string">"Custom1 Custom2"</span> /&gt;</span></span><br><span class="line">```xml</span><br><span class="line"></span><br><span class="line">Removing/Adding languages is also easy as this - they are defined by the *include.languages* property.</span><br><span class="line">For Example: only include html+css+js syntax highlighting (be careful - html is an alias for XML!, you have to include `Xml`)</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line"><span class="comment">&lt;!-- Languages to include !--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"include.languages"</span> <span class="attr">value</span>=<span class="string">"Css Javascript Xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/16/50-Codegroups/"/>
      <url>/2018/09/16/50-Codegroups/</url>
      <content type="html"><![CDATA[<h2 id="Code-Groups"><a href="#Code-Groups" class="headerlink" title="Code-Groups"></a>Code-Groups</h2><p>This example shows how to use code-groups. You can define a new code-group by adding a <code>data-enlighter-group</code> attribute to your code tags you want to group. The value is used as an internal identifier and is not shown anywhere (e.g. use numerical identifiers).<br>The name/title of the tab is defined by a <code>data-enlighter-title</code> attribute. To use a corporate style within all code-blocks grouped together, the theme definition of the first code-block defined in your document (the group leader) is used as theme of the complete group - other theme definitions will be ignored. if no theme is specified, the default theme (defined in the options) will be used, which is recommended.</p><h3 id="Define-a-Code-Group"><a href="#Define-a-Code-Group" class="headerlink" title="Define a Code-Group"></a>Define a Code-Group</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- the following 3 code-blocks will be grouped togehter - the theme will be "enlighter" (global theme definition of the group-leader) !--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-language</span>=<span class="string">"js"</span> <span class="attr">data-enlighter-group</span>=<span class="string">"group0001"</span> <span class="attr">data-enlighter-title</span>=<span class="string">"Javascript"</span>&gt;</span></span><br><span class="line">this.tokens = tokens || [];</span><br><span class="line">options = this.options;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Theme definition will be ignored !--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-language</span>=<span class="string">"java"</span> <span class="attr">data-enlighter-theme</span>=<span class="string">"panic"</span> <span class="attr">data-enlighter-group</span>=<span class="string">"group0001"</span> <span class="attr">data-enlighter-title</span>=<span class="string">"pure Java"</span>&gt;</span></span><br><span class="line">import javax.swing.JOptionPane;</span><br><span class="line"></span><br><span class="line">public class OddEven &#123;</span><br><span class="line">/**</span><br><span class="line"> * "input" is the number that the user gives to the computer</span><br><span class="line"> */</span><br><span class="line">private int input; // a whole number("int" means integer)</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Theme definition will be ignored !--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-language</span>=<span class="string">"php"</span> <span class="attr">data-enlighter-theme</span>=<span class="string">"twilight"</span> <span class="attr">data-enlighter-group</span>=<span class="string">"group0001"</span> <span class="attr">data-enlighter-title</span>=<span class="string">"PHP Script"</span>&gt;</span></span><br><span class="line">/** Test Snippet */</span><br><span class="line">$mysqli = new mysqli("localhost", "my_user", "my_password", "world");</span><br><span class="line">   </span><br><span class="line">/* check connection */</span><br><span class="line">if (mysqli_connect_errno()) &#123;</span><br><span class="line">    printf("Connect failed: %s\n", mysqli_connect_error());</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Initialize-Code-Groups"><a href="#Initialize-Code-Groups" class="headerlink" title="Initialize Code-Groups"></a>Initialize Code-Groups</h3><p>The initialization of code-groups differs from the standard. You have to use the <code>EnlighterJS.Util.Helper</code> utility function (triggered by Metainit and EnlighterJS.Util.Init) - it does the complete initialization and grouping for you!</p><ul><li>JS-Initialization Chain: EnlighterJS.Util.Init -&gt; <strong>EnlighterJS.Util.Helper</strong> -&gt; EnlighterJS</li><li>Metainit-Initialization Chain: EnlighterJS.Util.Metainit -&gt; <strong>EnlighterJS.Util.Helper</strong> -&gt; EnlighterJS</li></ul><p>Finally, use the following JavaScript code inside of a <code>domready</code> or <code>onload</code> event to create the highlighted elements.<br>Check out the options section to see the various options you can use. </p><p><strong>Notice:</strong> <code>grouping</code> has to set to <code>true</code> when using the javascript based initialization</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// highlight all pre tags; no inline-highlighting</span></span><br><span class="line">EnlighterJS.Util.Init(<span class="string">'pre'</span>, <span class="literal">null</span>, &#123;</span><br><span class="line">    indent: <span class="number">4</span>,</span><br><span class="line">    language: <span class="string">'js'</span>,</span><br><span class="line">    theme: <span class="string">'enlighter'</span>,</span><br><span class="line">    grouping: <span class="literal">true</span>,</span><br><span class="line">    rawButton: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/16/40-Options/"/>
      <url>/2018/09/16/40-Options/</url>
      <content type="html"><![CDATA[<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>Customize EnlighterJS` appearance by using the following configuration options. Try to start with one of the Example pages!</p><h3 id="Global-Options"><a href="#Global-Options" class="headerlink" title="Global Options"></a>Global Options</h3><p>The following options can be passed to the following methods to customize the rendering behaviour:</p><ul><li><code>EnlighterJS(codeblockElement, options = {}, container = null)</code> constructor</li><li><code>EnlighterJS.Util.Helper(elements, options = {})</code> utility function</li><li><code>EnlighterJS.Util.Init(blockSelector, inlineSelector, options= {})</code> utility function (recommended)</li></ul><h4 id="Option-Keys"><a href="#Option-Keys" class="headerlink" title="Option Keys"></a>Option Keys</h4><ul><li><strong>language</strong> - (string) The default language used if no <code>data-enlighter-language</code> attibutes are used - default: <strong>“generic”</strong></li><li><strong>theme</strong> - (string) The default theme used if no <code>data-enlighter-theme</code> attibutes are used - default: <strong>“enlighter”</strong></li><li><strong>indent</strong> - (integer) Number of spaces to replace tabs with (-1 means no replacement) - default: <strong>-1</strong></li><li><strong>hover</strong> - (string) Defines a css-classname which is added to each line. To enable build-in hover effects set it to “hoverEnabled” (default), <em>null</em> to disable it or to any custom class - default: <strong>“hoverEnabled”</strong></li><li><strong>oddClassname</strong> - (string) CSS-classname of all odd lines - default: <strong>“odd”</strong></li><li><strong>evenClassname</strong> - (string) CSS-classname of all even lines - default: <strong>“even”</strong></li><li><strong>showLinenumbers</strong> - (boolean) Display line-numbers in code-blocks (ol/li list used as container) - default: <strong>true</strong></li><li><strong>forceTheme</strong> - (boolean) Forces the renderer to use ignore attribute theme setting <code>data-enlighter-theme</code> - default: <strong>false</strong></li><li><strong>renderer</strong> - (string) Defines the renderer used to generate the output. Use <code>Inline</code> for Inline-Syntax-Highlighting or <code>Block</code> for standard highlighting - default: <strong>Block</strong></li><li><strong>rawButton</strong> - (boolean) Enables the optional “RAW Code Button” which will appear in ever codeblock (Block Renderer) to switch between highlighted and un-highlighted code - default: <strong>true</strong></li><li><strong>infoButton</strong> - (boolean) Enables the optional “Info Button” which provides a link to <code>enlighterjs.andidittrich.de</code> - default: <strong>true</strong></li><li><strong>windowButton</strong> - (boolean) Enables the optional “Window Button” which opens a new window with the unhighlighted  “raw” code within  - default: <strong>true</strong></li><li><strong>grouping</strong> - (boolean) Enables code-groups (only used by <code>EnlighterJS.Util.Helper</code> utility) - default: <strong>true</strong></li><li><strong>inlineContainerTag</strong> - (string) The html tag-name of the container (inline-syntax-highlighting only) where the generated code is wrapped into - default: <strong>“span”</strong></li><li><strong>ampersandCleanup</strong> - (boolean) Should the ampersand escape sequence <code>&amp;#38;amp;</code> automatically replaced by the ampersand sign during code cleanup ? Useful to resolve double escaped html code - default: <strong>true</strong></li><li><strong>rawcodeDoubleclick</strong> - (boolean) Toggle RAW/Highlighted code on doubleclick ? - default: <strong>false</strong></li><li><strong>cryptex</strong> - (object) Special options for use with the <a href="https://wordpress.org/plugins/cryptex" target="_blank" rel="noopener">Cryptex WordPress Plugin</a></li></ul><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    language : <span class="string">'javascript'</span>,</span><br><span class="line">    theme : <span class="string">'Eclipse'</span>,</span><br><span class="line">    indent : <span class="number">2</span>,</span><br><span class="line">    forceTheme: <span class="literal">false</span>,</span><br><span class="line">    rawButton: <span class="literal">false</span>,</span><br><span class="line">    showLinenumbers: <span class="literal">false</span>,</span><br><span class="line">    renderer: <span class="string">'Inline'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize EnlighterJS - use inline-highlighting only</span></span><br><span class="line">EnlighterJS.Util.Init(<span class="literal">null</span>, <span class="string">'code'</span>, options);</span><br></pre></td></tr></table></figure><h3 id="Element-Options"><a href="#Element-Options" class="headerlink" title="Element Options"></a>Element Options</h3><p>Some options need to be applied directly to the container elements which holds the code to highlight. These “local” options will override all global options which are set.</p><ul><li><strong>data-enlighter-language</strong> (string) - The language of the codeblock - overrides the global default setting | Block+Inline Content option</li><li><strong>data-enlighter-theme</strong> (string) - The theme of the codeblock - overrides the global default setting | Block+Inline Content option</li><li><strong>data-enlighter-group</strong> (string) - The identifier of the codegroup where the codeblock belongs to | Block Content option</li><li><strong>data-enlighter-title</strong> (string) - The title/name of the tab | Block Content option</li><li><strong>data-enlighter-linenumbers</strong> (boolean) - Show/Hide the linenumbers of a codeblock (Values: “true”, “false”) | Block Content option</li><li><strong>data-enlighter-highlight</strong> (string) - A List of lines to point out, comma seperated (ranges are supported) e.g. “2,3,6-10” | Block Content option</li><li><strong>data-enlighter-lineoffset</strong> (number) - Start value of line-numbering e.g. “5” to start with line 5 - attribute <code>start</code> of the ol tag is set | Block Content option</li></ul><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-language</span>=<span class="string">"js"</span> <span class="attr">data-enlighter-linenumbers</span>=<span class="string">"false"</span> <span class="attr">data-enlighter-lineoffset</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">EnlighterJS also supports <span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"special"</span> <span class="attr">data-enlighter-language</span>=<span class="string">"js"</span>&gt;</span>alert('Inline Sourcecode highlighting');<span class="tag">&lt;/<span class="name">code</span>&gt;</span> (since version 2.0).</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/16/30-Initialization/"/>
      <url>/2018/09/16/30-Initialization/</url>
      <content type="html"><![CDATA[<h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><p>Initialization means, that all elements (you wish to highlight) get selected and rendered by EnlighterJS. The original codeblock is set invisible and the rendered one is injected after. This task can be performed in <strong>two different ways</strong>:</p><h3 id="1-Metainit-Initialization"><a href="#1-Metainit-Initialization" class="headerlink" title="1. Metainit Initialization"></a>1. Metainit Initialization</h3><p>Instead of initializing EnlighterJS by javascript, it’s possible to use a simple html-metatag (called <em>EnlighterJS Metainit</em>) to run Enlighter on your page (with basic config options). This will be usefull if you only need a basic setup. Take a look into the examples <em>Examples/Testcase.Metainit.html</em> to see how it is working!<br>Basically Metainit takes the given html attribute options and converts them into a options object. These options will be passed to the <code>Enlighter.Util.Helper()</code> utility function - for inline elements (InlineRenderer) identified by <code>data-selector-inline</code> as well as block elements (BlockRenderer) by <code>data-selector-block</code>.<br>This will take all the work for you by adding a single line to the head section to use all the amazing EnlighterJS features like Inline-Syntax-Highlighting or CodeGroups!</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>Description: It enables block highlighting for all <code>pre</code> elements on the page as well as inline highlighting for all <code>code</code> elements. Javascript is set as default language used for highlighting. Each tab is replaced by four spaces to avoid rendering issues. Additionally the “raw code button” is enabled which allows the user to toggle between highlighted and unhighlighted code (e.g. to copy code).</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Initialize EnlighterJS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"EnlighterJS"</span> <span class="attr">content</span>=<span class="string">"Advanced javascript based syntax highlighting"</span> <span class="attr">data-indent</span>=<span class="string">"4"</span> <span class="attr">data-selector-block</span>=<span class="string">"pre"</span> <span class="attr">data-selector-inline</span>=<span class="string">"code"</span> <span class="attr">data-rawcodebutton</span>=<span class="string">"true"</span> <span class="attr">data-language</span>=<span class="string">"javascript"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h4><p>Following attributes are available (optional) and will be converted to the required options object to trigger <code>EnlighterJS.Util.Helper</code>. Take a look into the Metainit.js sources to see how it is working.</p><ul><li><strong>name</strong> (string) <strong>REQUIRED</strong> - This attribute identifies the metatag and has to be set to “EnlighterJS” (case sensitive)</li><li><strong>data-language</strong> (string) - Sets the default language of every codeblock (inline+block) on the page - default: <strong>generic</strong></li><li><strong>data-theme</strong> (string) - Sets the default theme of every codeblock (inline+block) on the page - default: <strong>enlighter</strong></li><li><strong>data-indent</strong> (number) - Number of spaces to replace tabs with (-1 means no replacement) - default: <strong>-1</strong></li><li><strong>data-selector-block</strong> (string) - The CSS selector to match all codeblocks for block-highlighting. Use “NULL” to disable block highlighting - default: <strong>pre</strong></li><li><strong>data-selector-inline</strong> (string) - The CSS selector to match all codeblocks for inline-highlighting. Use “NULL” to disable inline highlighting - default: <strong>code</strong></li><li><strong>data-rawcodebutton</strong> (boolean) - Enables the optional “RAW Code Button” which will appear in ever codeblock (Block Renderer) to switch between highlighted and un-highlighted code - default: <strong>false</strong></li><li><strong>data-windowwbutton</strong> (boolean) - Enables the optional “ Button” which</li><li><strong>data-infobutton</strong> (boolean) - Enables the optional “ Button” which</li><li><strong>data-linenumbers</strong> (boolean) - Display line-numbers in code-blocks (ol/li list used as container) - default: <strong>true</strong></li><li><strong>data-hover</strong> (string) -  Defines a css-classname which is added to each line. To enable build-in hover effects set it to “hoverEnabled” (default), <em>null</em> to disable it or to any custom class - default: <strong>“hoverEnabled”</strong></li></ul><h3 id="2-Javacript-based-Initialization"><a href="#2-Javacript-based-Initialization" class="headerlink" title="2. Javacript based Initialization"></a>2. Javacript based Initialization</h3><p>EnlighterJS provides 4 ways to get manually initialized:</p><ul><li>Use the native <code>Element.enlight()</code> method which will automatically creates an EnlighterJS instance of the selected single element</li><li>Create a new instance of <code>EnlighterJS</code> and provide the single element to highlight</li><li>To use Code-Groups you have to use <code>EnlighterJS.Util.Helper</code> utility function</li></ul><p><strong>Notice:</strong> You can pass any of the <a href="#global_options">Global Options</a> with each method. Every method will invoke the <code>EnlighterJS</code> constructor.</p><h4 id="Option-1-Native-Element-extension"><a href="#Option-1-Native-Element-extension" class="headerlink" title="Option 1 - Native Element extension"></a>Option 1 - Native Element extension</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get element by it's ID and activate highlighting using markdown as language</span></span><br><span class="line"><span class="built_in">document</span>.id(<span class="string">'myCustomCode'</span>).enlight(&#123;</span><br><span class="line">  language: <span class="string">'ruby'</span>, </span><br><span class="line">  indent: <span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// disable highlighting</span></span><br><span class="line"><span class="built_in">document</span>.id(<span class="string">'myCustomCode'</span>).enlight(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove highlighting (drop generated HTML from DOM)</span></span><br><span class="line"><span class="built_in">document</span>.id(<span class="string">'myHighlightedCode'</span>).enlight(<span class="string">'dispose'</span>);</span><br></pre></td></tr></table></figure><h4 id="Option-2-Use-an-EnlighterJS-instance-OOP-Style"><a href="#Option-2-Use-an-EnlighterJS-instance-OOP-Style" class="headerlink" title="Option 2 - Use an EnlighterJS instance (OOP Style)"></a>Option 2 - Use an EnlighterJS instance (OOP Style)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a new EnlighterJS instance</span></span><br><span class="line"><span class="keyword">var</span> myEnlighter = <span class="keyword">new</span> EnlighterJS(<span class="built_in">document</span>.id(<span class="string">'myCustomCode'</span>), &#123;</span><br><span class="line">  language: <span class="string">'php'</span>,</span><br><span class="line">  showLinenumbers: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// enable highlighting</span></span><br><span class="line">myEnlighter.enlight(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove highlighting (drop generated HTML from DOM)</span></span><br><span class="line">myEnlighter.dispose();</span><br></pre></td></tr></table></figure><h4 id="Option-3-Use-an-EnlighterJS-Util-Helper-utility-function"><a href="#Option-3-Use-an-EnlighterJS-Util-Helper-utility-function" class="headerlink" title="Option 3 - Use an EnlighterJS.Util.Helper utility function"></a>Option 3 - Use an EnlighterJS.Util.Helper utility function</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Highlight all code tags (inline code) and use Javascript as default language</span></span><br><span class="line">EnlighterJS.Util.Helper(<span class="built_in">document</span>.getElements(<span class="string">'code'</span>), &#123;</span><br><span class="line">    language: <span class="string">'javascript'</span>,</span><br><span class="line">    renderer: <span class="string">'Inline'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// OPTION1 - Element style syntax - get element by it's ID</span></span><br><span class="line"><span class="built_in">document</span>.id(<span class="string">'myJsCode'</span>).enlight(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// OPTION2 - Element style syntax - highlight all pre elements with the class *myPhp*</span></span><br><span class="line"><span class="comment">// an EnlighterJS instance is automatically created</span></span><br><span class="line"><span class="built_in">document</span>.getElements(<span class="string">'pre.myPhp'</span>).enlight(&#123;<span class="attr">language</span>: php&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/16/20-Usage/"/>
      <url>/2018/09/16/20-Usage/</url>
      <content type="html"><![CDATA[<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Download EnlighterJS and extract the files or use <a href="http://bower.io" target="_blank" rel="noopener">bower</a>. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>bower install enlighterjs</span><br></pre></td></tr></table></figure><p>Copy the prebuild files of the <em>Build/</em> directory into a web-accessible directory of your choice. </p><p>Link to the EnlighterJS.min.js javascript file and the EnlighterJS.min.css stylesheet in the head section of your document <strong>after</strong> the MooTools file.<br>The example below assumes you moved the files into your scripts folder under “js/“ and your styles folder under “css/“.<br>The extension .min indicates that these files are already minified. <strong>These files are ready for productive use!</strong><br>If you want to start developing, you should consider to use the uncompressed versions for easier debugging!</p><p>Rendering options can be defined as global option (Metainit attributes or options object) or local option using the <code>data-enlighter-</code> attributes on each codeblock.<br>It is recommended to use local options only if necessary (e.g. to define a language for each block).</p><h3 id="Integrate-EnlighterJS"><a href="#Integrate-EnlighterJS" class="headerlink" title="Integrate EnlighterJS"></a>Integrate EnlighterJS</h3><p>The integration of EnlighterJS requires the following 3 steps:</p><ol><li>Integrate MooTools.Core, EnlighterJS Script+Styles into your page</li><li>Prepare your source code elements on your page by adding a language identifier</li><li><a href="#initialization">“Initialize”</a> EnlighterJS to highlight the code</li></ol><p>Link to the EnlighterJS.yui.js javascript file and the EnlighterJS.yui.css stylesheet</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- Include EnlighterJS Styles --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/EnlighterJS.min.css"</span> /&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">&lt;!-- Include MooTools Framework --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/mootools-core-1.5.0-full-nocompat.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Include EnlighterJS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/EnlighterJS.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Prepare your source code by giving the element (containing the code) an optional <em>data-enlighter-language</em> attribute with the language of the code.<br><strong>Notice</strong>: Instead of Lighter.js *fuel:flame’ syntax combo within the css classname, EnlighterJS will use HTML5 <code>data-</code> attributes!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Syntax highlight using Javascript and default theme --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-language</span>=<span class="string">"js"</span>&gt;</span>var myClass = new Class(&#123;&#125;)<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Syntax highlight using the Git Theme with default language--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-theme</span>=<span class="string">"git"</span>&gt;</span>php_info();<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Finally, use the following JavaScript code examples inside of a ‘domready’ or ‘onload’ callback to create the highlighted elements - this process is called <em>initialization</em>.<br>Be sure to check out the Options section to see the various options you can use. The Example pages have various examples you can use.<br>Further informations as well as some advanced examples are available within the <a href="#initialization">Initialization Section</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use the Init utility function to highlight all pre elements - this is the recommended way and required to use the Code-Group feature</span></span><br><span class="line">EnlighterJS.Util.Init(<span class="string">'pre'</span>, <span class="literal">null</span>, &#123;</span><br><span class="line">    language: <span class="string">'php'</span>,</span><br><span class="line">    theme: <span class="string">'Classic'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Instead of initializing EnlighterJS manually, since version 1.1 it is possible to use a simple html-metatag (called <em>EnlighterJS Metainit</em>) to run Enlighter on your page (with basic config options).</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Initialize EnlighterJS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"EnlighterJS"</span> <span class="attr">content</span>=<span class="string">"Advanced javascript based syntax highlighting"</span> <span class="attr">data-language</span>=<span class="string">"php"</span> <span class="attr">data-theme</span>=<span class="string">"Enlighter"</span> <span class="attr">data-indent</span>=<span class="string">"2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Some-Examples"><a href="#Some-Examples" class="headerlink" title="Some Examples"></a>Some Examples</h3><p>Since version 1.8, it’s possible to highlight special lines of code. Just add the attribute <code>data-enlighter-highlight</code> to your codeblock and provide a set of lines to mark (ranges supported).</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- just highlight line number 2 !--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-language</span>=<span class="string">"js"</span> <span class="attr">data-enlighter-highlight</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">this.tokens = tokens || [];</span><br><span class="line">options = this.options;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- highlight line 2,3,4 !--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-language</span>=<span class="string">"js"</span> <span class="attr">data-enlighter-highlight</span>=<span class="string">"2-4"</span>&gt;</span></span><br><span class="line">EnlighterJS.Util.Init('pre', null, &#123;</span><br><span class="line">   indent : 2,</span><br><span class="line">   grouping: false</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Version 2.0 introduces some amazing features like Inline-Syntax-Highlighting. The <a href="#metainit_initialization">Metainit</a> tool performs this action automatically.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Highlight all pre(block) + code(inline) tags and use Javascript as default language</span></span><br><span class="line">EnlighterJS.Util.Init(<span class="string">'pre'</span>, <span class="string">'code'</span>, &#123;</span><br><span class="line">    language: <span class="string">'javascript'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>In some cases it might be usefull to start the linnumber counting with another value than 1 (maybe an excerpt). In this case you can add the <code>data-enlighter-lineoffset</code> attribute to your codeblock.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- start linenumber counting with line 15 !--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-language</span>=<span class="string">"js"</span> <span class="attr">data-enlighter-lineoffset</span>=<span class="string">"15"</span>&gt;</span></span><br><span class="line">this.tokens = tokens || [];</span><br><span class="line">options = this.options;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>常用的八种排序算法Java代码实现</title>
      <link href="/2018/09/06/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%85%AB%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Java%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/09/06/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%85%AB%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Java%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>Algorithm<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EightAlgorithm</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 常用的八种排序算法Java代码实现</span></span><br><span class="line"><span class="comment"> * 时间：2018-9-5-下午9:14:30 </span></span><br><span class="line"><span class="comment"> * 邮件：hasp_Jason@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span> </span></span><br><span class="line"><span class="comment"> * *辅助记忆*</span></span><br><span class="line"><span class="comment"> * 时间复杂度记忆- </span></span><br><span class="line"><span class="comment"> * 冒泡、选择、直接 排序需要两个for循环，每次只关注一个元素，平均时间复杂度为O（n2）（一遍找元素O(n)，一遍找位置O(n)）</span></span><br><span class="line"><span class="comment"> * 快速、归并、希尔、堆基于二分思想，log以2为底，平均时间复杂度为O(nlogn)（一遍找元素O(n)，一遍找位置O(logn)）</span></span><br><span class="line"><span class="comment"> * 稳定性记忆-“快选希堆”（非稳定：快牺牲稳定性） </span></span><br><span class="line"><span class="comment"> * 排序算法的稳定性：排序前后相同元素的相对位置不变，则称排序算法是稳定的；否则排序算法是不稳定的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> []array=&#123;<span class="number">23</span>,<span class="number">56</span>,<span class="number">8</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">95</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">11</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">"length: "</span>+array.length);</span><br><span class="line">insertSort(array);<span class="comment">//1.直接插入</span></span><br><span class="line"><span class="comment">//sheelSort(array);//2.希尔排序</span></span><br><span class="line"><span class="comment">//selectSort(array);//3.简单选择排序</span></span><br><span class="line"><span class="comment">//heapSort(array);//4.堆排序</span></span><br><span class="line"><span class="comment">//bubbleSort(array);//5.冒泡排序</span></span><br><span class="line"><span class="comment">//quickSort(array, 0, array.length-1);//6.快速排序  </span></span><br><span class="line"><span class="comment">//mergeSort(array);//7.归并排序</span></span><br><span class="line"><span class="comment">//sort(array,10);//8.基数排序</span></span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.直接插入  经常碰到这样一类排序问题：把新的数据插入到已经排好的数据列中。</span></span><br><span class="line"><span class="comment"> * 平均时间复杂度最坏时间复杂度空间复杂度是否稳定</span></span><br><span class="line"><span class="comment"> * O（n^2）O（n^2）O（1）是</span></span><br><span class="line"><span class="comment"> * 将第一个数和第二个数排序，然后构成一个有序序列</span></span><br><span class="line"><span class="comment"> * 将第三个数插入进去，构成一个新的有序序列。</span></span><br><span class="line"><span class="comment">   * 对第四个数、第五个数……直到最后一个数，重复第二步。</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   ***如何写成代码：</span></span><br><span class="line"><span class="comment">   *1.首先设定插入次数，即循环次数，for(int i=1;i&lt;length;i++)，1个数的那次不用插入。</span></span><br><span class="line"><span class="comment">   *2.设定插入数和得到已经排好序列的最后一个数的位数。insertNum和j=i-1。</span></span><br><span class="line"><span class="comment">   *3.从最后一个数开始向前循环，如果插入数小于当前数，就将当前数向后移动一位。</span></span><br><span class="line"><span class="comment">   *4.将当前数放置到空着的位置，即j+1。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> insertNum; <span class="comment">// 要插入的数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">insertNum = a[i];</span><br><span class="line"><span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; insertNum) &#123;<span class="comment">// 将大于insertNum的数向后移动一格</span></span><br><span class="line">a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">a[j + <span class="number">1</span>] = insertNum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2.希尔排序   对于直接插入排序问题，数据量巨大时。</span></span><br><span class="line"><span class="comment"> * 平均时间复杂度最坏时间复杂度空间复杂度是否稳定</span></span><br><span class="line"><span class="comment"> * O(nlogn)O（n^s）O（1）不是</span></span><br><span class="line"><span class="comment"> * 将数的个数设为n，取奇数k=n/2，将下标差值为k的数分为一组，构成有序序列。</span></span><br><span class="line"><span class="comment"> * 再取k=k/2 ，将下标差值为k的数分为一组，构成有序序列。</span></span><br><span class="line"><span class="comment"> * 重复第二步，直到k=1执行简单插入排序。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> ***如何写成代码：</span></span><br><span class="line"><span class="comment"> *1.首先确定分的组数。</span></span><br><span class="line"><span class="comment"> *2.然后对组中元素进行插入排序。</span></span><br><span class="line"><span class="comment"> *3.然后将length/2，重复1,2步，直到length=0为止。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sheelSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = a.length;</span><br><span class="line"><span class="keyword">while</span> (length != <span class="number">0</span>) &#123;</span><br><span class="line">length = length / <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">"length变化： "</span> + length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; length; x++) &#123; <span class="comment">// 分组个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x + length; i &lt; a.length; i += length) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i - length; <span class="comment">// j为有序序列最后一位的位数</span></span><br><span class="line"><span class="keyword">int</span> insertNum = a[i]; <span class="comment">// 要插入的元素</span></span><br><span class="line"><span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; insertNum &lt; a[j]; j -= length) &#123;</span><br><span class="line">a[j + length] = a[j];<span class="comment">// 向后移动length位</span></span><br><span class="line">&#125;</span><br><span class="line">a[j + length] = insertNum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3.简单选择排序    常用于取序列中最大最小的几个数时。</span></span><br><span class="line"><span class="comment"> * 平均时间复杂度最坏时间复杂度空间复杂度是否稳定</span></span><br><span class="line"><span class="comment"> * O（n^2） O（n^2）O（1）不是</span></span><br><span class="line"><span class="comment"> * (如果每次比较都交换，那么就是交换排序；如果每次比较完一个循环再交换，就是简单选择排序。)</span></span><br><span class="line"><span class="comment"> * 遍历整个序列，将最小的数放在最前面。</span></span><br><span class="line"><span class="comment"> * 遍历剩下的序列，将最小的数放在最前面。</span></span><br><span class="line"><span class="comment"> * 重复第二步，直到只剩下一个数。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> ***如何写成代码：</span></span><br><span class="line"><span class="comment"> *1.首先确定循环次数，并且记住当前数字和当前位置。</span></span><br><span class="line"><span class="comment"> *2.将当前位置后面所有的数与当前数字进行对比，小数赋值给key，并记住小数的位置。</span></span><br><span class="line"><span class="comment"> *3.比对完成后，将最小的值与第一个数的值交换。</span></span><br><span class="line"><span class="comment"> *4.重复2、3步。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = a.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;<span class="comment">// 循环次数</span></span><br><span class="line"><span class="keyword">int</span> key = a[i];</span><br><span class="line"><span class="keyword">int</span> position = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;<span class="comment">// 选出最小值和位置</span></span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; key) &#123;</span><br><span class="line">key = a[j];</span><br><span class="line">position = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[position] = a[i];<span class="comment">// 交换位置</span></span><br><span class="line">a[i] = key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4.堆排序   对简单选择排序的优化。</span></span><br><span class="line"><span class="comment"> * 平均时间复杂度最坏时间复杂度空间复杂度是否稳定</span></span><br><span class="line"><span class="comment"> * O(nlogn)O(nlogn)O（1）不是</span></span><br><span class="line"><span class="comment"> *将序列构建成大顶堆。</span></span><br><span class="line"><span class="comment"> *将根节点与最后一个节点交换，然后断开最后一个节点。</span></span><br><span class="line"><span class="comment"> *重复第一、二步，直到所有节点断开。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始排序"</span>);</span><br><span class="line"><span class="keyword">int</span> arrayLength = a.length;</span><br><span class="line"><span class="comment">// 循环建堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayLength - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 建堆</span></span><br><span class="line">buildMaxHeap(a, arrayLength - <span class="number">1</span> - i);</span><br><span class="line"><span class="comment">// 交换堆顶和最后一个元素</span></span><br><span class="line">swap(a, <span class="number">0</span>, arrayLength - <span class="number">1</span> - i);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = data[i];</span><br><span class="line">data[i] = data[j];</span><br><span class="line">data[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对data数组从0到lastIndex建大顶堆</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> lastIndex)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 从lastIndex处节点（最后一个节点）的父节点开始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (lastIndex - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">// k保存正在判断的节点</span></span><br><span class="line"><span class="keyword">int</span> k = i;</span><br><span class="line"><span class="comment">// 如果当前k节点的子节点存在</span></span><br><span class="line"><span class="keyword">while</span> (k * <span class="number">2</span> + <span class="number">1</span> &lt;= lastIndex) &#123;</span><br><span class="line"><span class="comment">// k节点的左子节点的索引</span></span><br><span class="line"><span class="keyword">int</span> biggerIndex = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在</span></span><br><span class="line"><span class="keyword">if</span> (biggerIndex &lt; lastIndex) &#123;</span><br><span class="line"><span class="comment">// 若果右子节点的值较大</span></span><br><span class="line"><span class="keyword">if</span> (data[biggerIndex] &lt; data[biggerIndex + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">// biggerIndex总是记录较大子节点的索引</span></span><br><span class="line">biggerIndex++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果k节点的值小于其较大的子节点的值</span></span><br><span class="line"><span class="keyword">if</span> (data[k] &lt; data[biggerIndex]) &#123;</span><br><span class="line"><span class="comment">// 交换他们</span></span><br><span class="line">swap(data, k, biggerIndex);</span><br><span class="line"><span class="comment">// 将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值</span></span><br><span class="line">k = biggerIndex;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5.冒泡排序    一般不用。</span></span><br><span class="line"><span class="comment">     * 平均时间复杂度最坏时间复杂度空间复杂度是否稳定</span></span><br><span class="line"><span class="comment">     * O（n^2） O（n^2）O（1）是</span></span><br><span class="line"><span class="comment"> *将序列中所有元素两两比较，将最大的放在最后面。</span></span><br><span class="line"><span class="comment"> *将剩余序列中所有元素两两比较，将最大的放在最后面。</span></span><br><span class="line"><span class="comment"> *重复第二步，直到只剩下一个数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> ***如何写成代码：</span></span><br><span class="line"><span class="comment"> *1.设置循环次数。</span></span><br><span class="line"><span class="comment"> *2.设置开始比较的位数，和结束的位数。</span></span><br><span class="line"><span class="comment"> *3.两两比较，将最小的放到前面去。</span></span><br><span class="line"><span class="comment"> *4.重复2、3步，直到循环次数完毕。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = a.length;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">temp = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 6.快速排序要求时间最快时。</span></span><br><span class="line"><span class="comment"> * 平均时间复杂度最坏时间复杂度空间复杂度是否稳定</span></span><br><span class="line"><span class="comment"> * O(nlogn) O（n^2）O（logn）不是</span></span><br><span class="line"><span class="comment"> *选择第一个数为p，小于p的数放在左边，大于p的数放在右边。</span></span><br><span class="line"><span class="comment"> *递归的将p左边和右边的数都按照第一步进行，直到不能递归。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line"><span class="keyword">int</span> base = numbers[start];<span class="comment">// 选定的基准值</span></span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> i = start, j = end;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">while</span> ((numbers[i] &lt; base) &amp;&amp; (i &lt; end))</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">while</span> ((numbers[j] &gt; base) &amp;&amp; (j &gt; start))</span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">temp = numbers[i];</span><br><span class="line">numbers[i] = numbers[j];</span><br><span class="line">numbers[j] = temp;</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= j);</span><br><span class="line"><span class="keyword">if</span> (start &lt; j)</span><br><span class="line">quickSort(numbers, start, j);</span><br><span class="line"><span class="keyword">if</span> (end &gt; i)</span><br><span class="line">quickSort(numbers, i, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 7.归并排序速度仅次于快排，内存少的时候使用，可以进行并行计算的时候使用。</span></span><br><span class="line"><span class="comment"> * 平均时间复杂度最坏时间复杂度空间复杂度是否稳定</span></span><br><span class="line"><span class="comment"> * O(nlogn) O(nlogn)O（n）是</span></span><br><span class="line"><span class="comment"> *选择相邻两个数组成一个有序序列。</span></span><br><span class="line"><span class="comment"> *选择相邻的两个有序序列组成一个有序序列。</span></span><br><span class="line"><span class="comment"> *重复第二步，直到全部组成一个有序序列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];<span class="comment">// 在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line">mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">mergeSort(arr, left, mid, temp);<span class="comment">// 左边归并排序，使得左子序列有序</span></span><br><span class="line">mergeSort(arr, mid + <span class="number">1</span>, right, temp);<span class="comment">// 右边归并排序，使得右子序列有序</span></span><br><span class="line">merge(arr, left, mid, right, temp);<span class="comment">// 将两个有序子数组合并操作</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = left;<span class="comment">// 左序列指针</span></span><br><span class="line"><span class="keyword">int</span> j = mid + <span class="number">1</span>;<span class="comment">// 右序列指针</span></span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;<span class="comment">// 临时数组指针</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">temp[t++] = arr[i++];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">temp[t++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid) &#123;<span class="comment">// 将左边剩余元素填充进temp中</span></span><br><span class="line">temp[t++] = arr[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= right) &#123;<span class="comment">// 将右序列剩余元素填充进temp中</span></span><br><span class="line">temp[t++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 将temp中的元素全部拷贝到原数组中</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">arr[left++] = temp[t++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 8.基数排序用于大量数，很长的数进行排序时。</span></span><br><span class="line"><span class="comment"> * 平均时间复杂度最坏时间复杂度空间复杂度是否稳定</span></span><br><span class="line"><span class="comment"> * O(N∗M)O(N∗M)O(M)是</span></span><br><span class="line"><span class="comment"> * 将所有的数的个位数取出，按照个位数进行排序，构成一个序列。</span></span><br><span class="line"><span class="comment"> * 将新构成的所有的数的十位数取出，按照十位数进行排序，构成一个序列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] number, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[number.length][number.length];</span><br><span class="line"><span class="keyword">int</span>[] order = <span class="keyword">new</span> <span class="keyword">int</span>[number.length];</span><br><span class="line"><span class="keyword">while</span> (m &lt;= d) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> lsd = ((number[i] / n) % <span class="number">10</span>);</span><br><span class="line">temp[lsd][order[lsd]] = number[i];</span><br><span class="line">order[lsd]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (order[i] != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; order[i]; j++) &#123;</span><br><span class="line">number[k] = temp[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">order[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">n *= <span class="number">10</span>;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java关键字volatile</title>
      <link href="/2018/09/05/java%E5%85%B3%E9%94%AE%E5%AD%97volatile/"/>
      <url>/2018/09/05/java%E5%85%B3%E9%94%AE%E5%AD%97volatile/</url>
      <content type="html"><![CDATA[<p>Volatile中文译为【易变的、不稳定的】，它被用来修饰那些被不同的线程访问和修改的变量。</p><p>学习volatile我们首先要来看一下Java内存模型(即Java Memory Model，简称JMM)。<br><a id="more"></a></p><p><img src="http://head.jmzhang.xin/github/su1.png" alt="image"></p><p>Java内存模型中规定了所有的变量都存储在主内存中，每条java线程各自拥有自己的工作内存，线程的工作内存中保存了该线程使用到的主内存中的共享变量的副本，线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程之间无法直接访问对方工作内存中的变量，线程间变量值的传递均需要在主内存来完成，线程、主内存和工作内存的交互关系如上图所示。</p><p>Volatile 修饰的变量即为主内存中的共享变量，当一个共享变量被volatile<br>修饰后，那么当这个变量在工作内存发生了变化后，必须要马上写到主内存中，而线程读取到是volatile修饰的变量时，必须去主内存中去获取最新的值，而不是读工作内存中主内存的副本，这就有效的保证了线程之间变量的可见性。</p><p>这就是volatile的第一个特性，内存可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</p><p>我们来看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest01</span> </span>&#123;</span><br><span class="line">    <span class="comment">// a是一个验证结果的变量 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> stop=<span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">         ThreadA threadA=<span class="keyword">new</span> ThreadA();</span><br><span class="line">         ThreadB threadB=<span class="keyword">new</span> ThreadB();</span><br><span class="line">         threadA.start();</span><br><span class="line">         threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线程A</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stop) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            a++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线程B</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            b=<span class="number">666</span>;</span><br><span class="line">            stop=<span class="keyword">true</span>;</span><br><span class="line">            b=<span class="number">666</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现，当线程B执行语句<br><em>stop</em>=<strong>true</strong>;后，会中断线程A的执行。但有没有可能A出现死循环呢？答案是有的，即当线程B更改了stop变量之后还没来得及将stop变量写入主存当中，线程B就转去做其他事了，这时线程A由于不知道线程B对stop变量的更改，因此会一直循环下去，虽然这种情况发生即概论很低，但是一旦发生了将造成很严重的后果。</p><p>使用volatile关键字后我们便可以解决这个问题，但是这样就可以保证线程安全了吗？答案是不能，我们来看一下下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest05</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line"><span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">100</span>;j++)&#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"num=:"</span>+num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码我们创建10个线程，每个线程中让num自增100次。执行后你会发现结果并不是我们想的1000，而是小于1000.这是为什么呢？因为volatile并不能让一个操作变成原子操作。Num++本身并不是原子操作，转换为字节码是这样的：</p><p>getstatic //读取静态变量（num）</p><p>iconst_1 //定义常量1</p><p>iadd //num增加1</p><p>putstatic //把num结果同步到主内存</p><p>虽然每次get后得到的都是最新变量值，但是进行idd的时候，由于非原子性操作，其他线程可能已经将num++执行了很多次，此时这个线程更新出的num便已经不是我们所期望得到的num值。</p><p>JVM在编译Java代码的时候，或者CPU在执行JVM字节码的时候，为了在不改变程序执行结果的前提下，优化程序的运行效率会对现有的指令顺序进行重新排序。</p><p>Volatile第二个特性即是可以防止指令重排序。</p><p>我们来看下面这个例子：</p><p>boolean contextReady = false;</p><p>在线程A中执行:</p><p>context = loadContext();//初始化context</p><p>contextReady = true;</p><p>在线程B中执行:</p><p>while( ! contextReady ){</p><p>sleep(200);</p><p>}</p><p>doAfterContextReady (context);</p><p>但如果一旦线程A中的指令重排序，会变成这样的执行顺序：</p><p>boolean contextReady = false;</p><p>线程A:</p><p>contextReady = true;</p><p>context = loadContext();//初始化context</p><p>线程B:</p><p>while( ! contextReady ){</p><p>sleep(200);</p><p>}</p><p>doAfterContextReady (context);</p><p>   我们发现context并没有进行初始化线程B跳出循环等待后便执行了doAfterContextReady<br>(context)方法，程序报错。</p><p>   此时我们可以给contextReady 增加volatile方法，以此解决关于contextReady<br>的指令重排序的问题。</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP三次握手四次挥手</title>
      <link href="/2018/09/04/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2018/09/04/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      <content type="html"><![CDATA[<p>由于网上关于TCP三次握手四次挥手的内容已经很丰富，所以我们今天趣味讲解一下TCP三次握手和四次挥手。<br><a id="more"></a></p><p><strong>三次握手：</strong></p><p>首先先上图：</p><p>![TCP三次握手]<br><img src="http://head.jmzhang.xin/img/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="image"></p><p>由于我给客户端和服务端都上了色，所以暂且就叫他们小蓝（Client）和小绿（Server）就好了。</p><p>由于一次意外，两人都双目失明，看不见了。他们只能通过声音辨认对方。</p><ol><li><p>小蓝首先叫了一声小绿（syn）</p></li><li><p>小绿听见听见小蓝在叫自己，便答应了一声自己在（ack），但小绿怕小蓝叫的是其他的小绿，便问小蓝是在叫自己吗（syn），小蓝听到后知道了是小绿，便进入（established）状态。</p></li><li><p>最后小蓝也答应了一声是自己（ack），小绿听到后进入（established）状态。</p></li></ol><p>这其中还有两个中间态：syn_sent和syn_rcvd，这两个状态叫【半打开】状态，也就是两人呼唤对方。Syn_sent是客户端的半打开状态，sun_rcvd是服务端的半打开状态。</p><p>Syn_sent : syn package has been sent</p><p>Syn_rcvd : syn package has been received</p><p>官方语言:</p><ol><li><p>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；</p></li><li><p>TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位SYN=1，同时选择一个初始序列号<br>seq=x ，此时，TCP客户端进程进入了<br>SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号。</p></li><li><p>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该<br>ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号<br>seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号。</p></li><li><p>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</p></li><li><p>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。 </p></li></ol><p><strong>四次挥手:</strong></p><p>![TCP四次挥手]<br><img src="http://head.jmzhang.xin/img/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="image"></p><p>两人离别的时候，</p><ol><li><p>小蓝说“我要走了”（FIN）</p></li><li><p>小绿回应“那好吧”（ACK）</p></li><li><p>此时小绿说了一些话，但发现小蓝真的不说话了，就说“我也走了”（FIN）</p></li><li><p>小蓝回应了一句“好的”（ACK）</p></li></ol><p>官方语言：</p><ol><li><p>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</p></li><li><p>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</p></li><li><p>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</p></li><li><p>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</p></li><li><p>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</p></li><li><p>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</p></li></ol><p>状态time_wait是一个非常特殊的状态，它是主动关闭的一方在回复完对方后进入的一个长期状态，这个状态标准的持续时间是4分钟，4分钟后才会进入到closed状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。</p><p>这个后果就是持续4分钟的time_wait状态，不能释放套接字资源(端口)，就好比守寡期，这段时间内套接字资源(端口)不得回收利用。</p><p>它的作用是重传最后一个ack报文，确保对方可以收到。因为如果对方没有收到ack的话，会重传fin报文，处于time_wait状态的套接字会立即向对方重发ack报文。</p><p>同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文(因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上)传过来时，都会被立即丢弃掉。4分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。</p><p>4分钟就是2个MSL，每个MSL是2分钟。MSL就是maximium segment<br>lifetime——最长报文寿命。这个时间是由官方RFC协议规定的。至于为什么是2个MSL而不是1个MSL呢？</p><p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p><p>第二，防止“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p><p>最后一个问题，为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p><p>建立连接的时候，<br>服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。</p><p>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p><p>四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从fin_wait_1状态直接进入到time_wait状态，跳过了fin_wait_2状态。</p><p><strong>扩展：TCP数据传输</strong></p><p>数据传输过程即是小蓝和小绿对话的过程。</p><p>只不过两人隔着河，且都看不见，所以当一方说话后（data）需要对方听到了回应一声（ACK）。</p><p>如果小蓝喊了一句，半天没听到小绿回复，小蓝就认为自己的话被大风吹走了，小绿没听见，所以需要重新喊话，这就是【tcp重传】。</p><p>也有可能是小绿听到了小蓝的话，但是小绿向小蓝的回复被大风吹走了，以至于小蓝没听见小绿的回复。小蓝并不能判断究竟是自己的话被大风吹走了还是小绿的回复被大风吹走了，小蓝也不用管，重传一下就是。</p><p>既然会重传，小绿就有可能同一句话听见了两次，这就是【去重】。【重传】和【去重】工作操作系统的网络内核模块都已经帮我们处理好了。</p><p>小蓝可以向小绿喊话，同样小绿也可以向小蓝喊话，因为tcp链接是「双工的」，双方都可以主动发起数据传输。不过无论是哪方喊话，都需要收到对方的确认才能认为对方收到了自己的喊话。</p><p>小蓝可能是个八卦，一说连说了八句话，这时候小绿可以不用一句一句回复，而是连续听了这八句话之后，一起向对方回复说前面你说的八句话我都听见了，这就是批量ack。但是小蓝也不能一次性说了太多话，小绿的脑子短时间可能无法消化太多，两人之间需要有协商好的合适的发送和接受速率，这个就是【TCP窗口大小】。</p><p>网络环境的数据交互同人类之间的对话还要复杂一些，它存在数据包乱序的现象。同一个来源发出来的不同数据包在「网际路由」上可能会走过不同的路径，最终达到同一个地方时，顺序就不一样了。操作系统的网络内核模块会负责对数据包进行排序，到用户层时顺序就已经完全一致了。</p><p>好了，今天就介绍到这里了，说的比较简单，深的等以后写，每天进步一点点，希望世界充满正能量！</p>]]></content>
      
      <categories>
          
          <category> TCP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2018/09/03/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/09/03/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="博主我用过很多云服务器、云主机搭建个人博客网站，但没用过github的page页，想尝试下，搞了一会就搭建完成了，总的来说很顺利，在这里分享给大家。"><a href="#博主我用过很多云服务器、云主机搭建个人博客网站，但没用过github的page页，想尝试下，搞了一会就搭建完成了，总的来说很顺利，在这里分享给大家。" class="headerlink" title="博主我用过很多云服务器、云主机搭建个人博客网站，但没用过github的page页，想尝试下，搞了一会就搭建完成了，总的来说很顺利，在这里分享给大家。"></a>博主我用过很多云服务器、云主机搭建个人博客网站，但没用过github的page页，想尝试下，搞了一会就搭建完成了，总的来说很顺利，在这里分享给大家。</h1><a id="more"></a><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><ul><li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js官方下载地址</a></p></li><li><p>从上面的链接下载node.js，并安装。 </p></li><li><p>下载LTS那个即可</p></li></ul><h2 id="申请Github账号"><a href="#申请Github账号" class="headerlink" title="申请Github账号"></a>申请Github账号</h2><ul><li><p><a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">Github注册页面</a></p></li><li><p>输入<strong>用户名，Email，密码</strong>，注册账号。比如我的用户名是：JasonZhangCauc</p></li></ul><h3 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h3><ul><li>注意，仓库名应该为：用户名.github.io。比如，我的仓库名是：<a href="https://github.com/xuezhisd/xuezhisd.github.io" target="_blank" rel="noopener">JasonZhangCauc.github.io</a>。</li></ul><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li><p><a href="https://git-scm.com/downloads/" target="_blank" rel="noopener">git下载地址</a></p></li><li><p>下载git安装文件，双击执行安装。</p></li></ul><h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><ul><li><p>打开git bash终端。</p></li><li><p>设置user.name和user.email。</p></li></ul><p>git config –global user.name “你的GitHub用户名”</p><p>git config –global user.email “你的GitHub注册邮箱”</p><ul><li>生成ssh密匙</li></ul><p>ssh-keygen -t rsa -C “你的GitHub注册邮箱”</p><ul><li>此时，在用户文件夹下就会有一个新的文件夹.ssh，里面有刚刚创建的ssh密钥文件id_rsa和id_rsa.pub。</li></ul><h3 id="将公匙添加到github上"><a href="#将公匙添加到github上" class="headerlink" title="将公匙添加到github上"></a>将公匙添加到github上</h3><ul><li><p>详细教程自行baidu。</p></li><li><p>用户头像→Settings→SSH and GPG keys→New SSH<br>key→将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH<br>key(添加SSH)按钮。</p></li></ul><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul><li>执行以下命令安装hexo。</li></ul><p># 安装hexo</p><p>npm install hexo-cli g# 初始化博客文件夹</p><p>hexo init blog# 切换到该路径cd blog# 安装hexo的扩展插件</p><p>npm install# 安装其它插件</p><p>npm install hexo-server –save</p><p>npm install hexo-admin –save</p><p>npm install hexo-generator-archive –save</p><p>npm install hexo-generator-feed –save</p><p>npm install hexo-generator-search –save</p><p>npm install hexo-generator-tag –save</p><p>npm install hexo-deployer-git –save</p><p>npm install hexo-generator-sitemap –save</p><h2 id="初探hexo"><a href="#初探hexo" class="headerlink" title="初探hexo"></a>初探hexo</h2><ul><li>第一次使用hexo，在本地创建服务器使用。</li></ul><p># 生成静态页面</p><p>hexo generate# 开启本地服务器</p><p>hexo s</p><ul><li><p>打开浏览器，地址栏中输入：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>,应该可以看见刚刚创建的博客了。</p></li><li><p>问题：为什么访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，无反应？ </p><ul><li>解决方法：可能是由于端口问题引起的。使用Ctrl+C中断本地服务，使用命令hexo<br>s -p<br>5000重新开启本地服务，访问<a href="http://localhost:5000/" target="_blank" rel="noopener">http://localhost:5000/</a>可以看到博客页面了。</li></ul></li></ul><h2 id="将hexo博客部署到github上"><a href="#将hexo博客部署到github上" class="headerlink" title="将hexo博客部署到github上"></a>将hexo博客部署到github上</h2><ul><li>修改配置文件<strong>blog/_config.yml</strong>，修改deploy项的内容，如下所示：</li></ul><p># Deployment 注释## Docs: <a href="https://hexo.io/docs/deployment.htmldeploy" target="_blank" rel="noopener">https://hexo.io/docs/deployment.htmldeploy</a>:</p><p># 类型</p><p>type: git</p><p># 仓库</p><p>repo: git\@github.com:JasonZhangCauc/JasonZhangCauc.github.io.git</p><p># 分支</p><p>branch: master</p><ul><li><p>注意：<strong>type: git</strong>中的冒号后面由空格。</p></li><li><p>注意：将git\@github.com:<strong>JasonZhangCauc/JasonZhangCauc</strong>.github.io.git中的用户名换成自己的用户名git\@github.com:<strong>github_username/github_username</strong>.github.io.git。</p></li></ul><h3 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h3><ul><li>输入下面的命令将hexo博客部署到github中：</li></ul><p># 清空静态页面</p><p>hexo clean# 生成静态页面</p><p>hexo generate# 部署</p><p>hexo deploy</p><ul><li>打开网页，输入<a href="http://github_username.github.io/" target="_blank" rel="noopener">http://github_username.github.io</a>，打开github上托管的博客。如我的博客地址是：<a href="http://xuezhisd.github.io/" target="_blank" rel="noopener">http://JasonZhangCauc.github.io</a>。</li></ul><h1 id="hexo命令缩写"><a href="#hexo命令缩写" class="headerlink" title="hexo命令缩写"></a>hexo命令缩写</h1><ul><li>hexo支持命令缩写，如下所示。hexo g等价于hexo generate。</li></ul><p>hexo g：hexo generate</p><p>hexo c：hexo clean</p><p>hexo s：hexo server</p><p>hexo d：hexo deploy</p><h1 id="hexo组合命令"><a href="#hexo组合命令" class="headerlink" title="hexo组合命令"></a>hexo组合命令</h1><p># 清除、生成、启动</p><p>hexo clean &amp;&amp; hexo g -s# 清除、生成、部署</p><p>hexo clean &amp;&amp; hexo g -d</p><h1 id="附博客维护方法："><a href="#附博客维护方法：" class="headerlink" title="附博客维护方法："></a>附博客维护方法：</h1><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/02/hello-world/"/>
      <url>/2018/09/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Hello! Friends!<br><a id="more"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"http://github.jmzhang.top/css/EnlighterJS.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://github.jmzhang.top/js/MooTools.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://github.jmzhang.top/js/EnlighterJS.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"EnlighterJS"</span> <span class="attr">content</span>=<span class="string">"Advanced javascript based syntax highlighting"</span> <span class="attr">data-indent</span>=<span class="string">"4"</span> <span class="attr">data-selector-block</span>=<span class="string">"pre"</span> <span class="attr">data-selector-inline</span>=<span class="string">"code.special"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span> <span class="attr">data-enlighter-language</span>=<span class="string">"java"</span>  &gt;</span></span><br><span class="line">    public class duiliecz &#123; // ���в�����</span><br><span class="line">    /**</span><br><span class="line">  * @param args</span><br><span class="line">  */</span><br><span class="line">    private int i = 0; // ���г�</span><br><span class="line">    private duilie top = new duilie(""); // ����ͷ</span><br><span class="line">    private duilie end = new duilie(""); // ����β</span><br><span class="line">    public void add(String s) &#123; // ��Ӷ���</span><br><span class="line">        duilie m = new duilie(s);</span><br><span class="line">        if (i != 0) &#123;</span><br><span class="line">            m.setS(top.getS());</span><br><span class="line">            top.setS(m);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            top.setS(m);</span><br><span class="line">            end.setS(m);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
